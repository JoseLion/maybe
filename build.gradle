buildscript {
  configurations.classpath {
    resolutionStrategy.activateDependencyLocking()
  }
}

plugins {
  id 'jacoco'
  id 'java-library'
  id 'maven-publish'
  id 'signing'

  id 'com.github.joselion.pretty-jupiter' version '1.2.0'
  id 'com.jfrog.bintray' version '1.8.5'
  id 'io.codearte.nexus-staging' version '0.21.2'
  id 'nebula.lint' version '16.7.0'
  id 'org.sonarqube' version '2.8'
}

def isRelease = project.hasProperty('releaseVersion')
def versionType = isRelease ? 'GA' : 'SNAPSHOT'

group = 'com.github.joselion'
version = "0.3.1-${versionType}"

sourceCompatibility = JavaVersion.VERSION_1_9
targetCompatibility = JavaVersion.VERSION_1_9

java {
  withJavadocJar()
  withSourcesJar()
}

dependencyLocking {
  lockAllConfigurations()
}

gradleLint {
  alwaysRun = false

  rules += [
    'all-dependency',
    'all-nebula-renames',
    'archaic-wrapper',
    'duplicate-dependency-class'
  ]
}

sonarqube {
  properties {
    property 'sonar.projectKey', 'JoseLion_maybe'
    property 'sonar.organization', 'joselion'
    property 'sonar.host.url', 'https://sonarcloud.io'
    property 'sonar.pullrequest.provider', 'github'
    property 'sonar.junit.reportPaths', "${buildDir}/test-results/junit"
    property 'sonar.coverage.jacoco.xmlReportPaths', "${jacoco.reportsDir}/test/jacocoTestReport.xml"
  }
}

repositories {
  jcenter()
  mavenCentral()
}

def jupiterVersion = '5.6.1'

dependencies {
  testImplementation(group: 'org.assertj', name: 'assertj-core', version: '3.15.0')
  testImplementation(group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: "$jupiterVersion")

  testRuntimeOnly(group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: "$jupiterVersion")
}

test {
  useJUnitPlatform()

  reports {
    junitXml.destination = file("${buildDir}/test-results/junit")
  }
}

prettyJupiter {
  duration.threshold = 150
}

jar {
  manifest {
    attributes(
      'Implementation-Title': project.name,
      'Implementation-Version': project.version
    )
  }
}

jacocoTestReport {
  reports {
    xml.enabled(true)
    html.enabled(true)
  }
}

tasks.withType(Javadoc) {
  options.addStringOption('Xwerror', '-quiet')
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java

      pom {
        name = 'maybe'
        packaging = 'jar'
        description = """\
          Maybe for Java is not a replacement for java.util.Optional. Instead, it leverages \
          its benefits to create a functional API that allows to execute/resolve operations \
          that may throw an exception. The intention is not only to avoid the imperative \
          try/catch, but also to promote safe exception handling and functional programming in Java
        """
        url = 'https://github.com/JoseLion/maybe'

        scm {
          connection = 'scm:git:https://github.com/JoseLion/maybe.git'
          developerConnection = 'scm:git:ssh://github.com/JoseLion/maybe.git'
          url = 'https://github.com/JoseLion/maybe'
        }

        licenses {
          license {
            name = 'The Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }

        developers {
          developer {
            id = 'JoseLion'
            name = "Jose Luis Leon"
            email = 'joseluis5000l@gmail.com'
          }
        }
      }
    }
  }

  repositories {
    maven {
      def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
      def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'

      url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
      credentials(PasswordCredentials) {
        username = ossrhUsername
        password = ossrhPassword
      }
    }
  }
}

signing {
  sign publishing.publications.mavenJava
}

javadoc {
  if(JavaVersion.current().isJava9Compatible()) {
    options.addBooleanOption('html5', true)
  }
}

nexusStaging {
  username = ossrhUsername
  password = ossrhPassword
}
