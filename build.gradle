buildscript {
  configurations.classpath {
    resolutionStrategy.activateDependencyLocking()
  }
}

plugins {
  id('checkstyle')
  id('jacoco')
  id('java-library')
  id('maven-publish')
  id('signing')

  alias(libs.plugins.mrjar)
  alias(libs.plugins.prettyJupiter)
  alias(libs.plugins.publishPlugin)
  alias(libs.plugins.sonarlint)
  alias(libs.plugins.strictNullCheck)
}

group = 'io.github.joselion'

multiRelease {
  targetVersions(11, 17, 22)
}

java {
  toolchain {
    vendor = JvmVendorSpec.ORACLE
  }
  withJavadocJar()
  withSourcesJar()
}

javadoc {
  title = 'Maybe - Safely handle exceptions'
  options {
    addBooleanOption('html5', true)
    addStringOption('Xwerror', '-quiet')
    tags('apiNote')
  }
}

jar {
  from(sourceSets.main.allSource)
  manifest {
    attributes(
      'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
      'Build-Jdk-Spec': java.sourceCompatibility,
      'Created-By': "Gradle ${gradle.gradleVersion}",
      'Implementation-Title': project.name,
      'Implementation-Vendor': 'Jose Luis Leon',
      'Implementation-Version': project.version,
      'Package': "${project.group}.${project.name}",
    )
  }
}

strictNullCheck {
  addEclipse()
  packageInfo {
    useEclipse()
    javadoc = '@author Jose Luis Leon'
  }
}

sonarLint {
  languages {
    include('java')
  }
  rules {
    enable(
      'java:S4266', // "Stream.collect()" calls should not be redundant
    )
    disable(
      'java:S107', // Allow constructors with more than 7 parameters
      'java:S3776', // Allow methods with more than 15 lines
      'java:S4032', // Allow packages only containing `package-info.java`
    )
  }
}

checkstyle {
  setToolVersion(libs.versions.checkstyle.get())
  setMaxWarnings(0)
}

dependencyLocking {
  lockAllConfigurations()
}

repositories {
  mavenCentral()
}

dependencies {
  sonarlintCorePlugins(libs.sonarlint.java)
}

testing {
  suites {
    test {
      useJUnitJupiter(libs.versions.junit.get())
      dependencies {
        implementation(libs.assertj)
        implementation(libs.mockito)
      }
    }
  }
}

java17Test.useJUnitPlatform()
java22Test.useJUnitPlatform()

jacoco {
  setToolVersion(libs.versions.jacoco.get())
}

jacocoTestReport {
  reports {
    xml.required = true
    html.required = true
  }
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from(components.java)

      pom {
        name = 'maybe'
        packaging = 'jar'
        description = """\
          Maybe<T> is a monadic wrapper similar java.util.Optional, but with a different intention. \
          By leveraging Optional<T> benefits, it provides a functional API that safely allows us to \
          perform operations that may or may not throw checked and unchecked exceptions.

          The wrapper intends to help us avoid the imperative try/catch syntax, while promoting safe \
          exception handling and functional programming principles.
        """
        url = 'https://github.com/JoseLion/maybe'

        scm {
          connection = 'scm:git:https://github.com/JoseLion/maybe.git'
          developerConnection = 'scm:git:ssh://github.com/JoseLion/maybe.git'
          url = 'https://github.com/JoseLion/maybe'
        }

        licenses {
          license {
            name = 'The Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }

        developers {
          developer {
            id = 'JoseLion'
            name = "Jose Luis Leon"
            email = 'joseluis5000l@gmail.com'
          }
        }
      }
    }
  }
}

signing {
  def signingKey = findProperty("signingKey")
  def signingPassword = findProperty("signingPassword")

  useInMemoryPgpKeys(signingKey, signingPassword)
  sign(publishing.publications.mavenJava)
}

nexusPublishing {
  repositories {
    sonatype {
      nexusUrl = uri('https://s01.oss.sonatype.org/service/local/')
      snapshotRepositoryUrl = uri('https://s01.oss.sonatype.org/content/repositories/snapshots/')
    }
  }
}
