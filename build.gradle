buildscript {
  configurations.classpath {
    resolutionStrategy.activateDependencyLocking()
  }
}

plugins {
  id 'checkstyle'
  id 'jacoco'
  id 'java-library'
  id 'maven-publish'
  id 'signing'

  id 'io.github.joselion.pretty-jupiter' version '2.0.1'
  id 'io.github.joselion.strict-null-check' version '2.0.0'
  id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
  id 'se.solrike.sonarlint' version '1.0.0-beta.4'
}

def isRelease = project.hasProperty('releaseVersion')
def suffix = isRelease ? '' : '-SNAPSHOT'

group = 'io.github.joselion'
version = "3.0.0$suffix"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

java {
  withJavadocJar()
  withSourcesJar()
}

javadoc {
  if(JavaVersion.current().isJava9Compatible()) {
    options.addBooleanOption('html5', true)
  }

  title = 'Maybe - Safely handle exceptions'
  options {
    addStringOption('Xwerror', '-quiet')
    tags('apiNote')
  }
}

jar {
  from sourceSets.main.allSource
  manifest {
    attributes(
      'Implementation-Title': project.name,
      'Implementation-Version': project.version
    )
  }
}

strictNullCheck {
  packageJavadoc = """\
    |@author Jose Luis Leon
    |@since v1.0.2
  |"""
  .stripMargin()
}

sonarlint {
  excludeRules = [
    'java:S4032' // Allow packages only containing `package-info.java`
  ]
  includeRules = [
    'java:S4266' // "Stream.collect()" calls should not be redundant
  ]
}

checkstyle {
  toolVersion = '10.3'
  sourceSets = sourceSets
}

jacoco {
  toolVersion = '0.8.8'
}

dependencyLocking {
  lockAllConfigurations()
}

repositories {
  mavenCentral()
}

def jupiterVersion = '5.8.2'

dependencies {
  sonarlintPlugins('org.sonarsource.java:sonar-java-plugin:7.12.0.29739')

  testImplementation('org.assertj:assertj-core:3.23.1')
  testImplementation('org.mockito:mockito-inline:4.6.1')
}

testing {
  suites {
    test {
      useJUnitJupiter('5.8.2')
    }
  }
}

prettyJupiter {
  duration.threshold = 150
}

jacocoTestReport {
  reports {
    xml.required = true
    html.required = true
  }
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java

      pom {
        name = 'maybe'
        packaging = 'jar'
        description = """\
          Maybe<T> is a monadic wrapper similar java.util.Optional, but with a different intention. \
          By leveraging Optional<T> benefits, it provides a functional API that safely allows us to \
          perform operations that may or may not throw checked and unchecked exceptions.

          The wrapper intends to help us avoid the imperative try/catch syntax, while promoting safe \
          exception handling and functional programming principles.
        """
        url = 'https://github.com/JoseLion/maybe'

        scm {
          connection = 'scm:git:https://github.com/JoseLion/maybe.git'
          developerConnection = 'scm:git:ssh://github.com/JoseLion/maybe.git'
          url = 'https://github.com/JoseLion/maybe'
        }

        licenses {
          license {
            name = 'The Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }

        developers {
          developer {
            id = 'JoseLion'
            name = "Jose Luis Leon"
            email = 'joseluis5000l@gmail.com'
          }
        }
      }
    }
  }
}

signing {
  sign publishing.publications.mavenJava
}

nexusPublishing {
  repositories {
    sonatype()
  }
}
