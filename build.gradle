buildscript {
  configurations.classpath {
    resolutionStrategy.activateDependencyLocking()
  }
}

plugins {
  id 'checkstyle'
  id 'jacoco'
  id 'java-library'
  id 'maven-publish'
  id 'signing'

  id 'com.github.joselion.pretty-jupiter' version '1.6.2'
  id 'com.github.joselion.strict-null-check' version '1.4.4'
  id 'io.codearte.nexus-staging' version '0.30.0'
  id 'name.remal.sonarlint' version '1.5.0'
  id 'nebula.lint' version '17.7.0'
}

def isRelease = project.hasProperty('releaseVersion')
def snapshotSuffix = '-SNAPSHOT'
def suffix = isRelease ? '' : snapshotSuffix

group = 'com.github.joselion'
version = "1.6.1$suffix"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

java {
  withJavadocJar()
  withSourcesJar()
}

javadoc {
  if(JavaVersion.current().isJava9Compatible()) {
    options.addBooleanOption('html5', true)
  }

  options.addStringOption('Xwerror', '-quiet')
}

jar {
  from sourceSets.main.allSource
  manifest {
    attributes(
      'Implementation-Title': project.name,
      'Implementation-Version': project.version
    )
  }
}

strictNullCheck {
  packageJavadoc = """\
    |@author Jose Luis Leon
    |@since v1.0.2
  |"""
  .stripMargin()
}

gradleLint {
  alwaysRun = false

  rules += [
    'all-dependency',
    'all-nebula-renames',
    'archaic-wrapper',
    'duplicate-dependency-class'
  ]
}

sonarlint {
  excludes {
    message 'java:S4032' // Allow packages only containing `package-info.java`
  }
  includes {
    message('java:S4266') // "Stream.collect()" calls should not be redundant
  }
}

checkstyle {
  toolVersion = '9.3'
  sourceSets = sourceSets
}

jacoco {
  toolVersion = '0.8.7'
}

dependencyLocking {
  lockAllConfigurations()
}

repositories {
  mavenCentral()
}

def jupiterVersion = '5.8.2'

dependencies {
  testImplementation('org.assertj:assertj-core:3.22.0')
  testImplementation("org.junit.jupiter:junit-jupiter-api:$jupiterVersion")

  testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$jupiterVersion")
}

test {
  useJUnitPlatform()

  reports {
    junitXml.outputLocation = file("$buildDir/test-results/junit")
  }
}

prettyJupiter {
  duration.threshold = 150
}

jacocoTestReport {
  reports {
    xml.required = true
    html.required = true
  }
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java

      pom {
        name = 'maybe'
        packaging = 'jar'
        description = """\
          Maybe for Java is not a replacement for java.util.Optional. Instead, it leverages \
          its benefits to create a functional API that allows to execute/resolve operations \
          that may throw an exception. The intention is not only to avoid the imperative \
          try/catch, but also to promote safe exception handling and functional programming in Java
        """
        url = 'https://github.com/JoseLion/maybe'

        scm {
          connection = 'scm:git:https://github.com/JoseLion/maybe.git'
          developerConnection = 'scm:git:ssh://github.com/JoseLion/maybe.git'
          url = 'https://github.com/JoseLion/maybe'
        }

        licenses {
          license {
            name = 'The Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }

        developers {
          developer {
            id = 'JoseLion'
            name = "Jose Luis Leon"
            email = 'joseluis5000l@gmail.com'
          }
        }
      }
    }
  }

  repositories {
    maven {
      def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
      def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'

      url = version.endsWith(snapshotSuffix) ? snapshotsRepoUrl : releasesRepoUrl
      credentials(PasswordCredentials) {
        username = project.findProperty('ossrhUsername')
        password = project.findProperty('ossrhPassword')
      }
    }
  }
}

signing {
  sign publishing.publications.mavenJava
}

nexusStaging {
  username = project.findProperty('ossrhUsername')
  password = project.findProperty('ossrhPassword')
}
