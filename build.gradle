buildscript {
  configurations.classpath {
    resolutionStrategy.activateDependencyLocking()
  }
}

plugins {
  id 'jacoco'
  id 'java-library'
  id 'maven'
  id 'signing'

  id 'com.github.joselion.pretty-jupiter' version '1.0.0'
  id 'com.jfrog.bintray' version '1.8.5'
  id 'io.codearte.nexus-staging' version '0.21.2'
  id 'nebula.lint' version '16.7.0'
  id 'org.sonarqube' version '2.8'
}

group = 'com.github.joselion'
archivesBaseName = 'maybe'
version = '0.1.0'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

dependencyLocking {
  lockAllConfigurations()
}

gradleLint {
  alwaysRun = false

  rules += [
    'all-dependency',
    'all-nebula-renames',
    'archaic-wrapper',
    'duplicate-dependency-class'
  ]
}

sonarqube {
  properties {
    property 'sonar.projectKey', 'JoseLion_maybe'
    property 'sonar.organization', 'joselion'
    property 'sonar.host.url', 'https://sonarcloud.io'
  }
}

repositories {
  jcenter()
  mavenCentral()
}

def jupiterVersion = '5.6.1'

dependencies {
  testImplementation(group: 'org.assertj', name: 'assertj-core', version: '3.15.0')
  testImplementation(group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: "$jupiterVersion")

  testRuntimeOnly(group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: "$jupiterVersion")
}

test {
  useJUnitPlatform()
}

prettyJupiter {
  duration.threshold = 150
}

jar {
  manifest {
    attributes(
      'Implementation-Title': project.name,
      'Implementation-Version': project.version
    )
  }
}

jacocoTestReport {
  reports {
    xml.enabled(true)
    html.enabled(true)
  }
}

tasks.withType(Javadoc) {
  options.addStringOption('Xwerror', '-quiet')
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc
}

artifacts {
  archives javadocJar, sourcesJar
}

signing {
  sign configurations.archives
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment {
        MavenDeployment deployment -> signing.signPom(deployment)
      }

      repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      pom.project {
        name = 'Maybe'
        packaging = 'jar'
        description = """\
          Maybe for Java is not a replacement for java.util.Optional. Instead, it leverages \
          its benefits to create a functional API that allows to execute/resolve operations \
          that may throw an exception. The intention is not only to avoid the imperative \
          try/catch, but also to promote safe exception handling and functional programming in Java
        """
        url = 'https://github.com/JoseLion/maybe'

        scm {
          connection = 'scm:git:https://github.com/JoseLion/maybe.git'
          developerConnection = 'scm:git:ssh://github.com/JoseLion/maybe.git'
          url = 'https://github.com/JoseLion/maybe'
        }

        licenses {
          license {
            name = 'The Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }

        developers {
          developer {
            id = 'JoseLion'
            name = "Jose Luis Leon"
            email = 'joseluis5000l@gmail.com'
          }
        }
      }
    }
  }
}
